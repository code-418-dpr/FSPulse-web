generator client {
  provider      = "prisma-client-js"
  output        = "../src/app/generated/prisma"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String  @id @default(uuid())
  lastname    String
  firstname   String
  middlename  String?
  regionId    String
  phoneNumber String  @unique
  email       String  @unique
  password    String
  tg          String? @unique
  tgId        String? @unique

  region         Region           @relation(fields: [regionId], references: [id])
  athlete        Athlete[]
  representative Representative[]
  coach          Coach[]
  notifications  Notification[]
}

enum SportsCategory {
  HMS // Заслуженный мастер спорта
  MS // Мастер спорта
  CMS // Кандидат в мастера спорта
  A // 1 разряд
  B // 2 разряд
  C // 3 разряд
  Ay // 1 юношеский разряд
  By // 2 юношеский разряд
  Cy // 3 юношеский разряд
}

model Region {
  id   String @id @default(uuid())
  name String @unique

  users User[]
}

model Discipline {
  id                       String  @id @default(uuid())
  name                     String  @unique
  minDuration              Int     @db.SmallInt
  maxDuration              Int     @db.SmallInt
  minTeamParticipantsCount Int     @db.SmallInt
  maxTeamParticipantsCount Int     @db.SmallInt
  isPersonalFormatAllowed  Boolean

  events    Event[]
  ageGroups AgeGroupOfDiscipline[]
}

model AgeGroupOfDiscipline {
  disciplineId String
  ageGroupId   String

  discipline Discipline @relation(fields: [disciplineId], references: [id])
  ageGroup   AgeGroup   @relation(fields: [ageGroupId], references: [id])

  @@unique([disciplineId, ageGroupId])
}

model AgeGroup {
  id     String @id @default(uuid())
  name   String
  minAge Int    @db.SmallInt
  maxAge Int?   @db.SmallInt

  disciplines AgeGroupOfDiscipline[]

  @@unique([name, minAge, maxAge])
}

model Skill {
  id   String @id @default(uuid())
  name String @unique

  athletes SkillOfAthlete[]
}

model SkillOfAthlete {
  athleteId String
  skillId   String
  grade     Int    @default(0) @db.SmallInt

  skill   Skill   @relation(fields: [skillId], references: [id])
  athlete Athlete @relation(fields: [athleteId], references: [id])

  @@unique([athleteId, skillId])
}

enum Membership {
  MAIN // Основной состав
  RESERVE // Резервный состав
  NONE // Не член сборной
}

model Athlete {
  id            String          @id
  birthDate     DateTime        @db.Date()
  address       String
  about         String?
  sportCategory SportsCategory?
  membership    Membership      @default(NONE)
  github        String?         @unique

  user           User                     @relation(fields: [id], references: [id])
  teams          AthleteOfTeam[]
  skills         SkillOfAthlete[]
  personalEvents AthleteOfPersonalEvent[]
}

model Coach {
  id        String   @id
  birthDate DateTime @db.Date()
  address   String

  user  User   @relation(fields: [id], references: [id])
  teams Team[]
}

model AthleteOfTeam {
  teamId         String
  athleteId      String
  isLeader       Boolean       @default(false)
  requestStatus  RequestStatus @default(PENDING)
  requestComment String?

  team    Team    @relation(fields: [teamId], references: [id])
  athlete Athlete @relation(fields: [athleteId], references: [id])

  @@unique([teamId, athleteId])
}

model AthleteOfPersonalEvent {
  athleteId String
  eventId   String

  event   Event   @relation(fields: [eventId], references: [id])
  athlete Athlete @relation(fields: [athleteId], references: [id])

  @@unique([athleteId, eventId])
}

model Team {
  id      String  @id @default(uuid())
  name    String
  about   String?
  eventId String
  score   Int?
  coachId String?
  isReady Boolean @default(false)

  event    Event           @relation(fields: [eventId], references: [id])
  coach    Coach?          @relation(fields: [coachId], references: [id])
  athletes AthleteOfTeam[]
}

enum RequestStatus {
  PENDING // На рассмотрении
  DECLINED // Отклонено
  APPROVED // Одобрено
}

enum EventLevel {
  OPEN // Открытый
  REGIONAL // Региональный
  FEDERAL // Всероссийский
}

model Event {
  id                       String        @id @default(uuid())
  name                     String
  description              String
  cover                    Bytes         @db.ByteA
  startRegistration        DateTime
  endRegistration          DateTime
  start                    DateTime
  end                      DateTime
  minAge                   Int           @db.SmallInt
  maxAge                   Int           @db.SmallInt
  minTeamParticipantsCount Int           @db.SmallInt
  maxTeamParticipantsCount Int           @db.SmallInt
  isPersonalFormatAllowed  Boolean
  maxParticipantsCount     Int           @db.SmallInt
  disciplineId             String
  isOnline                 Boolean
  address                  String?
  lat                      String?
  lng                      String?
  awards                   Int[]         @db.SmallInt
  level                    EventLevel
  applicationTime          DateTime      @default(now())
  requestStatus            RequestStatus @default(PENDING)
  requestComment           String?

  discipline       Discipline               @relation(fields: [disciplineId], references: [id])
  representatives  EventOfRepresentative[]
  files            File[]
  teams            Team[]
  personalAthletes AthleteOfPersonalEvent[]
}

model EventOfRepresentative {
  representativeId String
  eventId          String

  representative Representative @relation(fields: [representativeId], references: [id])
  event          Event          @relation(fields: [eventId], references: [id])

  @@unique([representativeId, eventId])
}

model File {
  id      String  @id @default(uuid())
  name    String
  content Bytes   @db.ByteA
  eventId String?

  event Event? @relation(fields: [eventId], references: [id])
}

model Representative {
  id              String        @id
  applicationTime DateTime      @default(now())
  requestStatus   RequestStatus @default(PENDING)
  requestComment  String?

  user   User                    @relation(fields: [id], references: [id])
  events EventOfRepresentative[]
}

enum NotificationType {
  INFO // Информационные уведомления
  WARNING // Предупреждения
  ERROR // Ошибки
  SUCCESS // Уведомления о успешных действиях
}

model Notification {
  id       String           @id @default(uuid())
  userId   String
  type     NotificationType
  title    String
  content  String
  sendTime DateTime         @default(now())
  isRead   Boolean          @default(false)

  user User @relation(fields: [userId], references: [id])
}
